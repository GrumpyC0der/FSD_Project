@inject HttpClient _client 

<EditForm Model="@food" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class=" form-group">
        <label>Food Name: </label>
        <div>
            <InputText @bind-Value="@food.FoodName" class="form-control" />
            <ValidationMessage For="@(() => food.FoodName)" />
        </div>
    </div>

    <div class=" form-group">
        <label>Food Price: </label>
        <div>
            <InputNumber @bind-Value="@food.FoodPrice" class="form-control" />
            <ValidationMessage For="@(() => food.FoodPrice)" />
        </div>
    </div>

    <div class=" form-group">
        <label>Store Name: </label>
        <div>
            <InputSelect @bind-Value="@food.FoodStoreID" class="form-control">
                <option value="">-- Select Food Store Name--</option>
                @if (FoodStores != null)
                {
                    foreach (var foodstore in FoodStores)
                    {
                        <option value="@foodstore.Id">@foodstore.FoodStoreName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => food.FoodStoreID)" />
        </div>
    </div>
    @if (!Disabled)
    {
        <br />
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BacktoList Target="foods" />
</EditForm>


@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Food food { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<FoodStore> FoodStores;

    protected async override Task OnInitializedAsync()
    {
        FoodStores = await _client.GetFromJsonAsync<List<FoodStore>>($"{Endpoints.FoodStoresEndpoint}");
    }
}
